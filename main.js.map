{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/scripts/api.js","webpack://mesto-project-ff/./src/scripts/card.js","webpack://mesto-project-ff/./src/scripts/modal.js","webpack://mesto-project-ff/./src/scripts/validation.js","webpack://mesto-project-ff/./src/scripts/index.js"],"sourcesContent":["// Конфигурация(идентификатор группы и токен)\r\n\r\nconst config = {\r\n  baseUrl: 'https://nomoreparties.co/v1/wff-cohort-23',\r\n  headers: {\r\n    authorization: '86aef1fc-61a0-4414-a6ed-93c12d4379af',\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\n\r\n// Проверка ответа сервера\r\n\r\nfunction checkResponse(res) {\r\n  if(res.ok) {\r\n    return res.json();                              //преобразование ответа в формат JSON при успешном статусе\r\n  } else {\r\n    return Promise.reject(`Ошибка: ${res.status}`); //отклонение промиса с ошибкой\r\n  }\r\n}\r\n\r\n// Загрузка информации о пользователе с сервера\r\n\r\nexport const getUserData = () => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n      headers: config.headers\r\n    })\r\n    .then(checkResponse)\r\n};\r\n\r\n\r\n// Загрузка карточек с сервера\r\n\r\nexport const getCards = () => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n      headers: config.headers\r\n  })\r\n  .then(checkResponse)\r\n};\r\n\r\n\r\n// Редактирование профиля\r\n\r\nexport const updateProfile = (nameProfile, aboutProfile) => {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: nameProfile,\r\n      about: aboutProfile \r\n    })\r\n   })\r\n  .then(checkResponse)\r\n};\r\n\r\n\r\n// Добавление новой карточки\r\n\r\nexport const addNewCard = (nameCard, linkCard) => {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: 'POST',\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      name: nameCard,\r\n      link: linkCard \r\n    })\r\n   })\r\n  .then(checkResponse)\r\n};\r\n\r\n\r\n// Удаление карточки\r\n\r\nexport const deleteCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/${cardId}`, {\r\n    method: 'DELETE',\r\n    headers: config.headers\r\n   })\r\n   .then(checkResponse)\r\n  };\r\n\r\n\r\n// Постановка и снятие лайка\r\n\r\nexport const addLikeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: 'PUT',\r\n    headers: config.headers\r\n   })\r\n   .then(checkResponse)\r\n  }; \r\n\r\nexport const dislikeCard = (cardId) => {\r\n  return fetch(`${config.baseUrl}/cards/likes/${cardId}`, {\r\n    method: 'DELETE',\r\n    headers: config.headers\r\n    })\r\n    .then(checkResponse)\r\n  };\r\n\r\n\r\n// Обновление аватара пользователя\r\n\r\nexport const changeAvatar = (data) => {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: 'PATCH',\r\n    headers: config.headers,\r\n    body: JSON.stringify({\r\n      avatar: data\r\n    })\r\n  })\r\n  .then(checkResponse)\r\n};","import { deleteCard, addLikeCard, dislikeCard } from \"./api\";\r\n\r\nconst cardTemplate = document.querySelector('#card-template').content;  // получение содержимого template через свойство content\r\n\r\n\r\n// функция создания карточки с установкой соотв. значений вложенных элементов и обработчика клика:\r\n\r\nexport function createCard(data, userId, deleteCardFn, likeCardFn, openImageFn) {\r\n    \r\n    const cardElement = cardTemplate.querySelector('.card').cloneNode(true);\r\n    cardElement.querySelector('.card__title').textContent = data.name;\r\n    const cardImage = cardElement.querySelector('.card__image');\r\n    cardImage.src = data.link;\r\n    cardImage.alt = data.name;\r\n    const likeCounter = cardElement.querySelector('.card__like-counter');\r\n    likeCounter.textContent = data.likes.length;\r\n    const deleteButton = cardElement.querySelector('.card__delete-button');\r\n\r\n    if(userId === data.owner._id) {\r\n        deleteButton.classList.add('card__delete-button_visible');\r\n        deleteButton.addEventListener('click', () => {\r\n            removeCard(cardElement, data._id);\r\n        });\r\n    } else {\r\n        deleteButton.classList.remove('card__delete-button_visible');\r\n    }\r\n\r\n    const likeButton = cardElement.querySelector('.card__like-button');\r\n    \r\n    if (data.likes.some((item) => item._id === userId)) {\r\n        likeButton.classList.add('card__like-button_is-active');\r\n    }\r\n    \r\n    likeButton.addEventListener('click', () => {\r\n        likeCard(likeButton, data._id, likeCounter);\r\n    });\r\n   \r\n    cardImage.addEventListener('click', openImageFn);\r\n \r\n    return cardElement;\r\n};\r\n\r\n\r\n// функция удаления для передачи в функцию создания карточки и вызова из обработчика клика:\r\n\r\nexport const removeCard = (cardElement, cardId) => {\r\n    console.log(`Удаление карточки с ID: ${cardId}`);\r\n    deleteCard(cardId)\r\n    .then(() => {\r\n        cardElement.remove();\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    });     \r\n};\r\n\r\n\r\n// функция лайка для передачи в функцию создания карточки и вызова из обработчика клика:\r\n\r\nexport const likeCard = (likeButton, cardId, likeCounter) => {\r\n   if (likeButton.classList.contains('card__like-button_is-active')) {\r\n        dislikeCard(cardId)\r\n        .then((data) => {\r\n            likeButton.classList.remove('card__like-button_is-active');\r\n            likeCounter.textContent = data.likes.length;\r\n        })\r\n        .catch((err) => {\r\n        console.log(err);\r\n        });  \r\n    } else {\r\n        addLikeCard(cardId)\r\n        .then((data) => {\r\n            likeButton.classList.add('card__like-button_is-active');\r\n            likeCounter.textContent = data.likes.length;            \r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n            });\r\n    }\r\n};","\r\n// функция открытия попапа c добавлением обработчика, запускаемого по нажатию клавиши:\r\n\r\nexport function openPopup(popup) {\r\n    popup.classList.add('popup_is-opened');\r\n    popup.classList.add('popup_is-animated');\r\n    document.addEventListener('keydown', closePopupByPressEsc);\r\n};\r\n\r\n\r\n// функция закрытия любого попапа со снятием слушателя события:\r\n\r\nexport function closePopup(popup) {\r\n    popup.classList.remove('popup_is-opened');\r\n    document.removeEventListener('keydown', closePopupByPressEsc);\r\n};\r\n\r\n\r\n// функция закрытия попапа по нажатию клавишы Escape:\r\n\r\nexport function closePopupByPressEsc(evt) {\r\n    if (evt.key === 'Escape') {\r\n        const openedPopup = document.querySelector('.popup_is-opened');\r\n        closePopup(openedPopup);\r\n    }\r\n};\r\n\r\n\r\n","// настройки валидации\r\n\r\n// const validationConfig = {\r\n//   formSelector: '.popup__form',\r\n//   inputSelector: '.popup__input',\r\n//   submitButtonSelector: '.popup__button',\r\n//   inactiveButtonClass: 'popup__button_disabled',\r\n//   inputErrorClass: 'popup__input_type_error',\r\n//   errorClass: 'popup__error_visible'\r\n// };\r\n\r\n\r\n// функция, которая добавляет класс с ошибкой\r\n\r\nconst showInputError = (formElement, formInput, errorMessage, validationConfig) => {\r\n  const formError = formElement.querySelector(`.${formInput.id}-error`);\r\n\r\n  formInput.classList.add(validationConfig.inputErrorClass);\r\n  formError.textContent = errorMessage;\r\n  formError.classList.add(validationConfig.errorClass);\r\n};\r\n\r\n\r\n// функция, которая удаляет класс с ошибкой\r\n\r\nconst hideInputError = (formElement, formInput, validationConfig) => {\r\n\r\n  const formError = formElement.querySelector(`.${formInput.id}-error`);\r\n\r\n  formInput.classList.remove(validationConfig.inputErrorClass);\r\n  formError.classList.remove(validationConfig.errorClass);\r\n  formError.textContent = '';\r\n};\r\n\r\n\r\n// функция проверки валидности поля и показа или скрытия ошибки\r\n\r\nconst isValid = (formElement, formInput, validationConfig) => {\r\n  if (formInput.validity.patternMismatch) {\r\n      formInput.setCustomValidity(formInput.dataset.errorMessage);    //здесь имя атрибута в camelCase соответсвует имени в HTML, указанном в kebab-case.\r\n  } else {\r\n      formInput.setCustomValidity(\"\");\r\n  }\r\n    \r\n  if (!formInput.validity.valid) {\r\n      showInputError(formElement, formInput, formInput.validationMessage, validationConfig);\r\n  } else {\r\n      hideInputError(formElement, formInput, validationConfig);\r\n  }\r\n};\r\n\r\n\r\n// функция, которая добавляет обработчиков всем полям формы\r\n\r\nconst setEventListeners = (formElement, validationConfig) => {\r\n  const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\r\n  const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\r\n\r\n  toggleButtonState(inputList, buttonElement, validationConfig);\r\n\r\n  inputList.forEach((formInput) => {\r\n      formInput.addEventListener('input', () => {\r\n          isValid(formElement, formInput, validationConfig);\r\n\r\n          toggleButtonState(inputList, buttonElement, validationConfig);\r\n      });\r\n  });\r\n};\r\n\r\n\r\n// функция включения валидации всех форм\r\n\r\nexport const enableValidation = (validationConfig) => {\r\n  const formList = Array.from(document.querySelectorAll(validationConfig.formSelector));\r\n\r\n  formList.forEach((formElement) => {\r\n      setEventListeners(formElement, validationConfig);\r\n  });\r\n};\r\n\r\n\r\n// функция проверки наличия невалидного поля\r\n\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((formInput) => {\r\n      return !formInput.validity.valid;\r\n  });\r\n};\r\n\r\n\r\n// функция меняет состояние кнопки в зависимости от валидности полей\r\n\r\nconst toggleButtonState = (inputList, buttonElement, validationConfig) => {\r\n  if(hasInvalidInput(inputList)) {\r\n      buttonElement.disabled = true;\r\n      buttonElement.classList.add(validationConfig.inactiveButtonClass);\r\n  } else {\r\n      buttonElement.disabled = false;\r\n      buttonElement.classList.remove(validationConfig.inactiveButtonClass);\r\n  }\r\n};\r\n\r\n\r\n// функция, которая очищает ошибки валидации формы\r\n\r\nexport const clearValidation = (formProfile, validationConfig) => {\r\n\r\n  const inputList = Array.from(formProfile.querySelectorAll(validationConfig.inputSelector));\r\n  const buttonElement = formProfile.querySelector(validationConfig.submitButtonSelector);\r\n\r\n  inputList.forEach((formInput) => {\r\n    hideInputError(formProfile, formInput, validationConfig);\r\n  });\r\n\r\n  toggleButtonState(inputList, buttonElement, validationConfig);\r\n};\r\n\r\n","import '../pages/index.css';\r\n// import { initialCards } from './cards.js';\r\nimport { createCard, removeCard, likeCard } from './card.js';\r\nimport { openPopup, closePopup, closePopupByPressEsc } from './modal.js';\r\nimport { enableValidation, clearValidation } from './validation.js';\r\nimport { getUserData, getCards, updateProfile, addNewCard, deleteCard, changeAvatar} from './api.js';\r\n\r\n//DOM-элементы:\r\n\r\n// элемент галереи для вставки карточек\r\nconst placesList = document.querySelector('.places__list');\r\n\r\n// аватар\r\nconst profileAvatarButton = document.querySelector('.profile__image');\r\nconst profileAvatarPopup = document.querySelector('.popup_type_new-avatar');\r\nconst formAvatar = profileAvatarPopup.querySelector('.popup__form');\r\n\r\n// профиль\r\nconst profileEditButton = document.querySelector('.profile__edit-button');\r\nconst profileEditPopup = document.querySelector('.popup_type_edit');\r\nconst formProfile = profileEditPopup.querySelector('.popup__form');\r\nconst nameInput = formProfile.querySelector('.popup__input_type_name');\r\nconst jobInput = formProfile.querySelector('.popup__input_type_description');\r\n\r\nconst nameProfile = document.querySelector('.profile__title');\r\nconst descriptionProfile = document.querySelector('.profile__description');\r\n\r\n// карточки\r\nconst cardAddButton = document.querySelector('.profile__add-button');\r\nconst cardAddPopup = document.querySelector('.popup_type_new-card');\r\nconst formCard = cardAddPopup.querySelector('.popup__form');\r\nconst placeName = formCard.querySelector('.popup__input_type_card-name');\r\nconst placeLink = formCard.querySelector('.popup__input_type_url');\r\n\r\n// массив всех попапов\r\nconst popups = document.querySelectorAll('.popup');\r\n\r\n// попап для изображения карточки\r\nconst cardImagePopup = document.querySelector('.popup_type_image');\r\nconst popupImage = document.querySelector('.popup__image');\r\nconst popupCaption = document.querySelector('.popup__caption');\r\n\r\n\r\n// последовательное добавление начальных карточек в элемент галереи:\r\n\r\nfunction renderInitialCards(cards, userId) {\r\n    cards.forEach((data) => {\r\n        const cardElement = createCard(data, userId, removeCard, likeCard, openImagePopup);\r\n        placesList.append(cardElement);\r\n        });\r\n};\r\n\r\n\r\n// функция заполнения полей формы в попапе редактирования профиля текущими значениями:\r\n\r\nfunction fillEditFormFields() {\r\n    const formEditProfile = document.forms['edit-profile'];\r\n    const inputName = formEditProfile.elements.name;\r\n    const inputDescription = formEditProfile.elements.description;\r\n\r\n    const name = nameProfile.textContent;\r\n    const description = descriptionProfile.textContent;\r\n\r\n    inputName.value = name;\r\n    inputDescription.value = description;\r\n}\r\n\r\n\r\n// обработка кликов по аватару профиля\r\n\r\nprofileAvatarButton.addEventListener('click', () => {\r\n    openPopup(profileAvatarPopup);\r\n    formAvatar.reset();\r\n    clearValidation(formAvatar, validationConfig);\r\n});\r\n\r\n\r\n// обработка события submit при отправке формы изменения аватара\r\n\r\n                                                                        //функция обработчик \"отправки\" формы:\r\nfunction handleAvatarFormSubmit(evt) {\r\n    evt.preventDefault();                                               //отмена стандартной отправки формы.\r\n                \r\n    const avatarInput = formAvatar.querySelector('.popup__input_type_url');\r\n    const avatarLink = avatarInput.value;\r\n                                                                        //использование кнопки сабмита из объекта evt без необходимости её поиска      \r\n    evt.submitter.textContent = 'Сохранение...';\r\n    evt.submitter.disabled = true;\r\n    \r\n                                                                        // обновление данных на сервере и вставка новых значений на страницу:    \r\n    changeAvatar(avatarLink)\r\n    .then(() => {\r\n        profileAvatarButton.style.backgroundImage = `url(${avatarLink})`;\r\n        closePopup(profileAvatarPopup);                                 //закрытие попапа после отправки формы:\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    })\r\n    .finally(() => {\r\n        evt.submitter.textContent = 'Сохранить';\r\n        evt.submitter.disabled = false;\r\n    });\r\n};\r\n                                                                        //прикрепление обработчика к форме, слушатель события submit:\r\nformAvatar.addEventListener('submit', handleAvatarFormSubmit);\r\n\r\n\r\n// обработка кликов по кнопке редактирования профиля:\r\n                                                                       \r\nprofileEditButton.addEventListener('click', () => {\r\n    openPopup(profileEditPopup);\r\n    fillEditFormFields();\r\n    clearValidation(formProfile, validationConfig);\r\n});\r\n\r\n\r\n// обработка кликов по кнопке  добавления карточки:\r\n\r\ncardAddButton.addEventListener('click', () => {\r\n    openPopup(cardAddPopup);\r\n    formCard.reset();\r\n    clearValidation(formCard, validationConfig);\r\n})\r\n\r\n\r\n// закрытие любого попапа кликом по кнопке или оверлею:\r\n\r\npopups.forEach((item) => {\r\n    item.addEventListener('mousedown', (evt) => {\r\n        if(evt.target.classList.contains('popup__close') || evt.target.classList.contains('popup')) {\r\n            closePopup(item);\r\n        };\r\n    });\r\n});\r\n\r\n\r\n// функция открытия попапа с изображением:\r\n\r\nfunction openImagePopup(evt) {\r\n    if (evt.target.classList.contains('card__image')) {\r\n    popupImage.src = evt.target.src; \r\n    popupImage.alt = evt.target.alt;\r\n    popupCaption.textContent = evt.target.alt;\r\n    openPopup(cardImagePopup);\r\n    }\r\n};\r\n\r\n\r\n// обработка события submit при отправке формы редактирования профиля\r\n                                                                        //функция обработчик \"отправки\" формы:\r\nfunction handleProfileFormSubmit(evt) {\r\n    evt.preventDefault();                                               //отмена стандартной отправки формы.\r\n                                                                        //получение значений полей:\r\n    const nameValue = nameInput.value;\r\n    const jobValue = jobInput.value;\r\n                                                                        //использование кнопки сабмита из объекта evt без необходимости её поиска      \r\n    evt.submitter.textContent = 'Сохранение...';\r\n    evt.submitter.disabled = true;\r\n                                                                        // обновление данных на сервере и вставка новых значений на страницу:    \r\n    updateProfile(nameValue, jobValue)\r\n    .then(() => {\r\n        nameProfile.textContent = nameValue;\r\n        descriptionProfile.textContent = jobValue;\r\n        closePopup(profileEditPopup);                                   //закрытие попапа после отправки формы\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    })\r\n    .finally(() => {\r\n        evt.submitter.textContent = 'Сохранить';\r\n        evt.submitter.disabled = false;\r\n    });\r\n    \r\n}\r\n                                                                        //прикрепление обработчика к форме, слушатель события submit:\r\nformProfile.addEventListener('submit', handleProfileFormSubmit);\r\n\r\n\r\n// обработка события submit при отправке формы добавления карточки\r\n                                                                        //функция обработчик \"отправки\" формы:\r\nfunction handleCardFormSubmit(evt) {\r\n    evt.preventDefault();                                               //отмена стандартной отправки формы.\r\n                                                                        //использование кнопки сабмита из объекта evt без необходимости её поиска:     \r\n    evt.submitter.textContent = 'Сохранение...';\r\n    evt.submitter.disabled = true;\r\n                                                                        //получение значений полей:\r\n    const nameValue = placeName.value;\r\n    const linkValue = placeLink.value;\r\n\r\n    addNewCard(nameValue, linkValue)\r\n    .then((data) => {\r\n        const cardElement = createCard(data, data.owner._id, removeCard, likeCard, openImagePopup); //создание новой карточки путём передачи функции createCard новых значений через параметры\r\n    placesList.prepend(cardElement);                                    //добавление новой карточки в начало, перед остальными карточками\r\n    formCard.reset();                                                   //сброс, очистка полей формы\r\n    closePopup(cardAddPopup);                                           //закрытие попапа после отправки формы:        \r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    })\r\n    .finally(() => {\r\n        evt.submitter.textContent = 'Сохранить';\r\n        evt.submitter.disabled = false;\r\n    });\r\n \r\n}\r\n                                                                        //прикрепление обработчика к форме, слушатель события submit:\r\nformCard.addEventListener('submit', handleCardFormSubmit);\r\n\r\n\r\n// настройки валидации\r\n\r\nconst validationConfig = {\r\n    formSelector: '.popup__form',\r\n    inputSelector: '.popup__input',\r\n    submitButtonSelector: '.popup__button',\r\n    inactiveButtonClass: 'popup__button_disabled',\r\n    inputErrorClass: 'popup__input_type_error',\r\n    errorClass: 'popup__error_visible'\r\n  };\r\n  \r\nenableValidation(validationConfig);                                     // включение валидации всех форм\r\n\r\nclearValidation(formProfile, validationConfig);                         // очистка ошибок валидации \r\n\r\n\r\n//API\r\n\r\nPromise.all([getUserData(), getCards()])\r\n    .then(([user, cards]) => {\r\n        nameProfile.textContent = user.name;\r\n        descriptionProfile.textContent = user.about;\r\n        profileAvatarButton.style.backgroundImage = `url(${user.avatar})`;\r\n        let userId = user._id;\r\n\r\n        renderInitialCards(cards, userId);\r\n    })\r\n    .catch((err) => {\r\n        console.log(err);\r\n    })\r\n\r\n"],"names":["config","baseUrl","headers","authorization","checkResponse","res","ok","json","Promise","reject","concat","status","cardTemplate","document","querySelector","content","createCard","data","userId","deleteCardFn","likeCardFn","openImageFn","cardElement","cloneNode","textContent","name","cardImage","src","link","alt","likeCounter","likes","length","deleteButton","owner","_id","classList","add","addEventListener","removeCard","remove","likeButton","some","item","likeCard","cardId","console","log","fetch","method","then","deleteCard","catch","err","contains","dislikeCard","addLikeCard","openPopup","popup","closePopupByPressEsc","closePopup","removeEventListener","evt","key","hideInputError","formElement","formInput","validationConfig","formError","id","inputErrorClass","errorClass","toggleButtonState","inputList","buttonElement","validity","valid","hasInvalidInput","disabled","inactiveButtonClass","clearValidation","formProfile","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","placesList","profileAvatarButton","profileAvatarPopup","formAvatar","profileEditButton","profileEditPopup","nameInput","jobInput","nameProfile","descriptionProfile","cardAddButton","cardAddPopup","formCard","placeName","placeLink","popups","cardImagePopup","popupImage","popupCaption","openImagePopup","target","reset","preventDefault","avatarLink","value","submitter","body","JSON","stringify","avatar","style","backgroundImage","finally","formEditProfile","inputName","inputDescription","description","forms","elements","nameValue","jobValue","aboutProfile","about","updateProfile","nameCard","linkCard","prepend","formSelector","patternMismatch","setCustomValidity","dataset","errorMessage","showInputError","validationMessage","isValid","setEventListeners","enableValidation","all","_ref","_ref2","user","cards","append","renderInitialCards"],"sourceRoot":""}